<?php

/**
 * Implements hook_form_FORM_ID_alter().
 * Alter regional settings form to bring configuration setting fields for
 * timezone restrictions.
 */
function timezone_form_system_regional_settings_alter(&$form, &$form_sate, $form_id) {
  $form['timezone']['timezone_restriction'] = array(
    '#type' => 'fieldset',
    '#title' => t('Restrict Timezone List for Users'),
  );
  $form['timezone']['timezone_restriction']['timezone_restricted'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable timezone restriction.'),
    '#default_value' => variable_get('timezone_restricted', 0),
  );
  $form['timezone']['timezone_restriction']['timezone_restriction_list'] = array(
    '#type' => 'textarea',
    '#title' => t('Timezone list'),
    '#default_value' => variable_get('timezone_restriction_list', ''),
    '#states' => array(
      // Hide the list if restriction in not enabled.
      'invisible' => array(
        'input[name="timezone_restricted"]' => array('checked' => FALSE),
      ),
    ),
    '#description' => t("Enter list of timezones to be shown to users. One in each line in the format\"&lt;timezone-name&gt;|&lt;label&gt;\"   "),
  );
  $form['#validate'][] = 'timezone_validate_system_regional_settings';
}

/**
 * @see timezone_form_system_regional_settings_alter().
 * Validate whether entered timezones names are valid.
 */
function timezone_validate_system_regional_settings($form, &$form_state) {
  if ($form_state['values']['timezone_restricted'] && !empty($form_state['values']['timezone_restriction_list'])) {
    $timezone_settings = explode("\n", $form_state['values']['timezone_restriction_list']);
    // Restrict to drupal core approved timezone list.
    $timezone_list = array_keys(system_time_zones(false));

    $error_message = '';
    foreach ($timezone_settings as $timezone_setting) {
      list($timezone_name, ) = explode('|', $timezone_setting);
      if (!in_array($timezone_name, $timezone_list)) {
        $error_message .= t(' Timezone name @tzname is not valid.', array('@tzname' => $timezone_name));
      }
    }
    if (!empty($error_message)) {
      form_set_error('timezone_restriction_list', $error_message);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function timezone_form_user_profile_form_alter(&$form, &$form_sate, $form_id) {
  global $user;
  if (isset($form['timezone']['timezone']) && variable_get('timezone_restricted', 0)) {
    $form['timezone']['timezone']['#options'] = timezone_time_zones($form['#user']->uid != $user->uid);
  }
}

/**
 * Return configured list of timezones.
 */
function timezone_get_configured_timezones() {
  $restricted_zone_list = explode("\n", variable_get('timezone_restriction_list', ''));
  $zonelist = array();
  foreach ($restricted_zone_list as $timezone_setting) {
    $timezone_setting_parts = explode('|', $timezone_setting);
    $zonelist[$timezone_setting_parts[0]] = isset($timezone_setting_parts[1]) ? $timezone_setting_parts[1] : '';
  }
  return $zonelist;
}

/**
 * Modified copy of system_time_zones()
 *
 * @see system_time_zones()
 * @see timezone_form_user_profile_form_alter().
 * @param $blank
 *   If evaluates true, prepend an empty time zone option to the array.
 */
function timezone_time_zones($blank = NULL) {
  $zonelist = timezone_get_configured_timezones();

  $zones = $blank ? array('' => t('- None selected -')) : array();
  foreach ($zonelist as $zone => $label) {
    $zones[$zone] = t('@prefix: @date', array(
      '@date' => format_date(REQUEST_TIME, 'custom', variable_get('date_format_long', 'l, F j, Y - H:i') . ' O', $zone),
      '@prefix' => $label)
    );
  }

  return $zones;
}
